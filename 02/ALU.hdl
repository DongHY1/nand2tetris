// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not


CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // 处理x的输入
    Mux16(a=x , b=false , sel=zx , out=outzx ); // 处理zx逻辑
    // 如何把一个16位的数每一位都取反？用Not16
    Not16(in=outzx , out=outnx1 ); // nx的前置逻辑
    // 但是这个16位要取决于Nx
    Mux16(a=outzx , b=outnx1 , sel=nx , out=outnx );

    // 处理y的输入
    Mux16(a=y , b=false , sel=zy , out=outzy );
    Not16(in=outzy , out=outny1 );  
    Mux16(a=outzy , b=outny1 , sel=ny , out=outny );

    // 计算f的逻辑
    Add16(a = outnx , b = outny , out = outf0 );
    And16(a = outnx , b = outny , out = outf1 );
    Mux16(a=outf1 , b=outf0 , sel=f , out=outf );

    // 计算no
    Not16(in=outf , out=outno1 );
    Mux16(a=outf , b=outno1 , sel=no , out=out,out[0..7]=outlow,out[8..15]=outhigh,out[15]=symbol );

    // 计算zr和ng
    // 先判断out的每一位是否全是0？由于我们只有Or8Way 所以需要把out进行拆分
     Or8Way(in=outlow, out=or_out_low); // 对低 8 位进行或运算
     Or8Way(in=outhigh , out=or_out_high ); // 对高8位进行或运算
     Or(a=or_out_low , b=or_out_high , out=or_out );
     Not(in=or_out , out=zr );
     And(a=symbol , b=true , out=ng );
    //// Replace this comment with your code.
}